<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Machine Learning on mitakeck.github.io </title>
    <link>http://mitakeck.github.io/tags/machine-learning/index.xml</link>
    <language>en-us</language>
    <author>Alexander Ivanov</author>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>文字画像からフォントを推定する</title>
      <link>http://mitakeck.github.io/cnn-font-analyzer/</link>
      <pubDate>Sun, 12 Mar 2017 14:45:51 JST</pubDate>
      <author>Alexander Ivanov</author>
      <guid>http://mitakeck.github.io/cnn-font-analyzer/</guid>
      <description>

&lt;h1 id=&#34;文字画像からフォントを推定したい&#34;&gt;文字画像からフォントを推定したい&lt;/h1&gt;

&lt;p&gt;吊り広告や看板に使われているフォントがどういうフォントなのか気になるときがある。&lt;/p&gt;

&lt;p&gt;そんなとき画像から使用されているフォントを推定してくれる Web サービスやシステムはいくつかある。&lt;/p&gt;

&lt;p&gt;それらがどういうロジックでフォントを推定しているのかは分からないが、なんとなく作りたくなったので自作してみることにする。&lt;/p&gt;

&lt;p&gt;今回は手始めに 10 種類のフォントを用いて、画像の中に写った文字を見てフォントを推定する仕組みを畳み込みニューラルネットワークを用いて作成してみる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;about.png&#34; alt=&#34;about.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;入力は文字が書かれた画像データ

&lt;ul&gt;
&lt;li&gt;画像サイズは 64x64&lt;/li&gt;
&lt;li&gt;画像中には 1 文字だけ描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;出力は推定した文字のフォント

&lt;ul&gt;
&lt;li&gt;ただし 推定は以下 10 個のフォントの中から行う&lt;/li&gt;
&lt;li&gt;futura, gillsans, helvetica, opitma, andalemono, arial, impact, timenewroman, trebuchetms, verdana&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;学習データの準備&#34;&gt;学習データの準備&lt;/h2&gt;

&lt;p&gt;なにはともあれとりあえず学習データを用意する。&lt;/p&gt;

&lt;p&gt;今回は学習データとして文字画像とその正解ラベルがあればいいので指定のフォントで文字が描画された画像を大量に用意する。&lt;/p&gt;

&lt;p&gt;その際 ImageMagick を用いるとだいぶ楽ができる。&lt;/p&gt;

&lt;h3 id=&#34;imagemagick-で画像を一括生成&#34;&gt;ImageMagick で画像を一括生成&lt;/h3&gt;

&lt;p&gt;ImageMagick で指定フォントの文字画像を出力するには &lt;code&gt;font&lt;/code&gt; と &lt;code&gt;label&lt;/code&gt; オプションを最低限指定してやれば良い&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-font&lt;/code&gt; にはフォントを指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt; には描画したい文字を指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt; には出力先の画像ファイル名を指定&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; $ convert -background white -fill black -size 64x64 -gravity center -font [font] label:[label] [output]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あと出力される画像の見栄えの調節用オプションとして &lt;code&gt;background&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;gravity&lt;/code&gt; 等がある。&lt;/p&gt;

&lt;p&gt;詳しくは &lt;a href=&#34;http://www.imagemagick.org/Usage/text/&#34;&gt;ImageMagick v6 Examples &amp;ndash;
 Text to Image Handling&lt;/a&gt; を参照のこと。&lt;/p&gt;

&lt;p&gt;例えば、フォントは Futura で a という文字が描画された画像を futura-a.png として出力場合は以下のような感じにオプションをしていしてやれば良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert -background white -fill black -size 64x64 -gravity center -font /Library/Fonts/Futura.ttc label:a futura-a.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下、a から z までの画像を出力した例&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;futura-a.png&#34; alt=&#34;futura-a.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;いろいろなフォントで-a-z-の画像を出力する&#34;&gt;いろいろなフォントで a-z の画像を出力する&lt;/h3&gt;

&lt;p&gt;シェル芸で 10 種類分のフォント画像を準備する。
その際、フォント一覧とフォントファイルの場所を記述した &lt;code&gt;fonts.txt&lt;/code&gt; と、描画する文字データを記述した &lt;code&gt;data.txt&lt;/code&gt; を用いた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;join&lt;/code&gt; で &lt;code&gt;fonts.txt&lt;/code&gt; と &lt;code&gt;data.txt&lt;/code&gt; をクロスジョインして &lt;code&gt;awk&lt;/code&gt; で &lt;code&gt;convert&lt;/code&gt; コマンドに文字列整形して &lt;code&gt;sh&lt;/code&gt; で実行しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ join -j `cat fonts.txt | wc -l` -t, fonts.txt data.txt | awk -F, &#39;{print &amp;quot;convert -background white -fill black -size 64x64 -gravity center -font \&amp;quot;&amp;quot; $3 &amp;quot;\&amp;quot; label:&amp;quot; $4 &amp;quot; train/&amp;quot; $2 &amp;quot;/&amp;quot; $4 &amp;quot;.png&amp;quot;}&#39; | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一応実際に使用した &lt;code&gt;fonts.txt&lt;/code&gt; と &lt;code&gt;data.txt&lt;/code&gt; を載せておきます。&lt;/p&gt;

&lt;p&gt;fonts.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;futura,/Library/Fonts/Futura.ttc
gillsans,/Library/Fonts/GillSans.ttc
helvetica,/System/Library/Fonts/HelveticaNeueDeskInterface.ttc
opitma,/System/Library/Fonts/Optima.ttc
andalemono,/Library/Fonts/Andale Mono.ttf
arial,/Library/Fonts/Arial.ttf
impact,/Library/Fonts/Impact.ttf
timenewroman,/Library/Fonts/Times New Roman.ttf
trebuchetms,/Library/Fonts/Trebuchet MS.ttf
verdana,/Library/Fonts/Verdana.ttf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;data.txt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして最後にディレクトリに配置する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;train/&lt;/code&gt; には学習用のデータを配置する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validation&lt;/code&gt; にはテスト用のデータを配置する。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;.
|-- train
|   |-- andalemono
|   |-- arial
|   |-- futura
|   |-- gillsans
|   |-- helvetica
|   |-- impact
|   |-- opitma
|   |-- timenewroman
|   |-- trebuchetms
|   `-- verdana
`-- validation
    |-- andalemono
    |-- arial
    |-- futura
    |-- gillsans
    |-- helvetica
    |-- impact
    |-- opitma
    |-- timenewroman
    |-- trebuchetms
    `-- verdana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;識別器の構築には keras を用いるのだが、以下のようなディレクトリ構成にしておくと、
keras 側でいろいろと自動で処理してくれる。
非常に便利だ。&lt;/p&gt;

&lt;h3 id=&#34;学習データのかさ増し&#34;&gt;学習データのかさ増し&lt;/h3&gt;

&lt;p&gt;学習用のデータを傾けたり位置をずらしたりした画像を大量に生成することで学習データをかさ増しする。&lt;/p&gt;

&lt;p&gt;ImageMagick でやれなくもないけど、Python のコードでかさ増しを行った。&lt;/p&gt;

&lt;p&gt;以下のコード片が回転処理と移動処理をランダムに行うコードである。
いずれも OpenCV の python ラッパーの &lt;code&gt;cv2&lt;/code&gt; を用いている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;rotate&lt;/span&gt;(src):
    rows,cols &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; src&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;shape
    r &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;360&lt;/span&gt;)
    M &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;getRotationMatrix2D((cols&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;,rows&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;), r, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;warpAffine(src, M, (rows, cols), flags&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;INTER_LINEAR)

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;move&lt;/span&gt;(src):
    rows,cols &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; src&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;shape
    dx &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;)
    dy &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;)
    M &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;float32([[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, dx],[&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, dy]])

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;warpAffine(src,M,(cols,rows))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;指定画像に対して上記回転と移動処理を施し保存する処理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;make&lt;/span&gt;(imgs, pathToDataset, pathToDatasetSaved, n&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;100&lt;/span&gt;):
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; img &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; imgs:
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; img&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt; :
            src &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;imread(pathToDataset &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; img, &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;)
            src &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;resize(src, (imgSize, imgSize))
            src &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;bitwise_not(src)
            prefix &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;)[&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;xrange&lt;/span&gt;(&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, n):
                dst &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; move(rotate(move(rotate(src))))
                cv2&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;imwrite(pathToDatasetSaved &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; prefix &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;{0:04d}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;format(x) &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;, dst)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;imagerdatagenherator-作成&#34;&gt;ImagerDataGenherator 作成&lt;/h3&gt;

&lt;p&gt;画像データのバッチを生成するために Keras では &lt;a href=&#34;https://keras.io/ja/preprocessing/image/&#34;&gt;ImageDataGenerator&lt;/a&gt; という仕組みが用意されている。&lt;/p&gt;

&lt;p&gt;今回は白黒画像なので &lt;code&gt;color_mode&lt;/code&gt; を &lt;code&gt;grayscale&lt;/code&gt; にして、他クラス分類させたいので、&lt;code&gt;class_mode&lt;/code&gt; に &lt;code&gt;categorical&lt;/code&gt; を指定する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;img_width, img_height &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;64&lt;/span&gt;

train_data_dir &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;../datasets/data/train&amp;quot;&lt;/span&gt;
validation_data_dir &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;../datasets/data/validation&amp;quot;&lt;/span&gt;

datagen &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; ImageDataGenerator(rescale&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;255&lt;/span&gt;)

train_generator &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; datagen&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;flow_from_directory(
        train_data_dir,
        target_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(img_width, img_height),
        batch_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;64&lt;/span&gt;,
        color_mode&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;grayscale&amp;quot;&lt;/span&gt;,
        class_mode&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;categorical&amp;quot;&lt;/span&gt;)

validation_generator &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; datagen&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;flow_from_directory(
        validation_data_dir,
        target_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(img_width, img_height),
        batch_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;64&lt;/span&gt;,
        color_mode&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;grayscale&amp;quot;&lt;/span&gt;,
        class_mode&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;categorical&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;学習モデル作成&#34;&gt;学習モデル作成&lt;/h2&gt;

&lt;p&gt;次に NN の層を定義していく。&lt;/p&gt;

&lt;p&gt;Keras では &lt;code&gt;Sequential&lt;/code&gt; モデルを最初に生成して、そいつに対して &lt;code&gt;.add()&lt;/code&gt; メソッドを用いて層を追加していく形で NN を構築していく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;model &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Sequential()
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Convolution2D(&lt;span style=&#34;color: #FF6600&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, input_shape&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(img_width, img_height, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Activation(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)))

model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Convolution2D(&lt;span style=&#34;color: #FF6600&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Activation(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)))

model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Convolution2D(&lt;span style=&#34;color: #FF6600&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Activation(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(MaxPooling2D(pool_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)))

model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Flatten())
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Dense(&lt;span style=&#34;color: #FF6600&#34;&gt;64&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Activation(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Dropout(&lt;span style=&#34;color: #FF6600&#34;&gt;0.5&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Dense(&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;))
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add(Activation(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;そしてモデルの学習の前に &lt;code&gt;compile()&lt;/code&gt; メソッドを使って幾つかの設定を行う必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loss&lt;/code&gt; : 損失関数の設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optimizer&lt;/code&gt; : 最適化手法の設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metrics&lt;/code&gt; : 評価指標の設定&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;,
              optimizer&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;,
              metrics&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;

&lt;!-- ![model.png](model.png) --&gt;

&lt;h2 id=&#34;学習&#34;&gt;学習&lt;/h2&gt;

&lt;p&gt;いよいよモデルを学習させる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# ハイパーパラメタ&lt;/span&gt;
nb_epoch &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;300&lt;/span&gt;
nb_train_samples &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;2048&lt;/span&gt;
nb_validation_samples &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;832&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# 学習を行う&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# fit_generator() の返り値に学習過程のデータが得られる&lt;/span&gt;
history &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;fit_generator(
        train_generator,
        samples_per_epoch&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;nb_train_samples,
        nb_epoch&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;nb_epoch,
        validation_data&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;validation_generator,
        nb_val_samples&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;nb_validation_samples)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Epoch 1/300
2048/2048 [==============================] - 13s - loss: 0.4733 - acc: 0.8062 - val_loss: 0.3308 - val_acc: 0.9000
Epoch 2/300
2048/2048 [==============================] - 13s - loss: 0.3765 - acc: 0.8884 - val_loss: 0.3329 - val_acc: 0.9000
Epoch 3/300
2048/2048 [==============================] - 13s - loss: 0.3564 - acc: 0.8953 - val_loss: 0.3154 - val_acc: 0.9000
Epoch 4/300
2048/2048 [==============================] - 13s - loss: 0.3380 - acc: 0.9006 - val_loss: 0.2956 - val_acc: 0.9065
Epoch 5/300
2048/2048 [==============================] - 13s - loss: 0.3192 - acc: 0.9038 - val_loss: 0.2766 - val_acc: 0.9096
Epoch 6/300
2048/2048 [==============================] - 13s - loss: 0.3063 - acc: 0.9046 - val_loss: 0.2622 - val_acc: 0.9115
Epoch 7/300
2048/2048 [==============================] - 11s - loss: 0.2888 - acc: 0.9069 - val_loss: 0.2560 - val_acc: 0.9094
Epoch 8/300
2048/2048 [==============================] - 14s - loss: 0.2742 - acc: 0.9099 - val_loss: 0.2484 - val_acc: 0.9142
...
Epoch 294/300
2048/2048 [==============================] - 13s - loss: 0.0990 - acc: 0.9522 - val_loss: 0.0822 - val_acc: 0.9609
Epoch 295/300
2048/2048 [==============================] - 12s - loss: 0.0921 - acc: 0.9552 - val_loss: 0.0736 - val_acc: 0.9619
Epoch 296/300
2048/2048 [==============================] - 12s - loss: 0.0890 - acc: 0.9564 - val_loss: 0.0707 - val_acc: 0.9650
Epoch 297/300
2048/2048 [==============================] - 13s - loss: 0.0954 - acc: 0.9535 - val_loss: 0.0735 - val_acc: 0.9612
Epoch 298/300
2048/2048 [==============================] - 14s - loss: 0.0904 - acc: 0.9543 - val_loss: 0.0699 - val_acc: 0.9643
Epoch 299/300
2048/2048 [==============================] - 13s - loss: 0.0869 - acc: 0.9557 - val_loss: 0.0710 - val_acc: 0.9632
Epoch 300/300
2048/2048 [==============================] - 13s - loss: 0.0913 - acc: 0.9562 - val_loss: 0.0725 - val_acc: 0.9619
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;evaluate_generator(validation_generator, nb_validation_samples)
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# [0.068484609230206564, 0.9645432738157419]&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# loss と accuracy の値が得られる&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;save_weights()&lt;/code&gt; メソッドを用いて、モデルを保存しておく&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# モデルを保存する&lt;/span&gt;
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;save_weights(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;e300.h5&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;識別精度
&lt;img src=&#34;modelacc.png&#34; alt=&#34;modelacc.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ロス
&lt;img src=&#34;modelloss.png&#34; alt=&#34;modelloss.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;とりあえずモデルを使ってみる&#34;&gt;とりあえずモデルを使ってみる&lt;/h2&gt;

&lt;p&gt;てきとうに画像を突っ込んでフォントを推定してみる&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# 推定処理&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;keras.preprocessing&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; image
fonts &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;andalemono&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;arial&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;futura&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;gillsans&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;helvetica&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;impact&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;opitma&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;timenewroman&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;trebuchetms&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;verdana&amp;quot;&lt;/span&gt;]
lefts &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;9&lt;/span&gt;])

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# 学習済みの重みをロード&lt;/span&gt;
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;load_weights(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;e300.h5&amp;#39;&lt;/span&gt;)
model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;compile(loss&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;binary_crossentropy&amp;#39;&lt;/span&gt;,
              optimizer&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;,
              metrics&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# 適当にデータを読み込ませる&lt;/span&gt;
filename &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;../datasets/data/validation/andalemono/f-0911.png&amp;quot;&lt;/span&gt;

img &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; image&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;load_img(filename, target_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(img_height, img_width), grayscale&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;)
x &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; image&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;img_to_array(img)
x &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;expand_dims(x, axis&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;)

x &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;255.0&lt;/span&gt;

pred &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;predict(x)[&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]
plt&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)
plt&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;imshow(img)
plt&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;)
plt&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;barh(lefts, pred, tick_label&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;fonts, align&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;predict.png&#34; alt=&#34;predict.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いい感じ。&lt;/p&gt;

&lt;h3 id=&#34;混合行列を描画する&#34;&gt;混合行列を描画する&lt;/h3&gt;

&lt;p&gt;さっきの予測処理を関数化する&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;predict&lt;/span&gt;(imagepath):
    fonts &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;andalemono&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;arial&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;futura&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;gillsans&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;helvetica&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;impact&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;opitma&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;timenewroman&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;trebuchetms&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;verdana&amp;quot;&lt;/span&gt;]
    img &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; image&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;load_img(filename, target_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;(img_height, img_width), grayscale&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;)
    x &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; image&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;img_to_array(img)
    x &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;expand_dims(x, axis&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;)

    x &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;255.0&lt;/span&gt;

    pred &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;predict(x)[&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]
    pred_index &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;argmax(pred)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; pred_index, fonts[pred_index]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;テスト用データに対して予測処理をして、配列に格納する処理&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;j&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;k&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;]

acc &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [[], [], [], [], [], [], [], [], [], []]
incre &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;260.0&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; font &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; fonts:
    font_index &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; fonts&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;index(font)
    acc[font_index] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;0.0&lt;/span&gt;]
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; data:
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;xrange&lt;/span&gt;(&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;):
            &lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;../datasets/data/validation/&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; font &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; d &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;-091&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;str&lt;/span&gt;(i) &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;.png&amp;quot;&lt;/span&gt;
            pred &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; predict(&lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;)
            acc[font_index][pred[&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color: #555555&#34;&gt;+=&lt;/span&gt; incre
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最後に混合行列を描画する。
描画には &lt;code&gt;matplotlib&lt;/code&gt; で行った。&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; specgram
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;sklearn.metrics&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; confusion_matrix
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;sklearn.svm&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; LinearSVC
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;sklearn.utils&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; resample
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;matplotlib&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; pylab
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;np&lt;/span&gt;

cm &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; acc
name_list &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;andalemono&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;arial&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;futura&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;gillsans&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;helvetica&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;impact&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;opitma&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;timenewroman&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;trebuchetms&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;verdana&amp;quot;&lt;/span&gt;]
title &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Font Prediction&amp;quot;&lt;/span&gt;

pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;clf()
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;matshow(cm, fignum&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;, cmap&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Blues&amp;#39;&lt;/span&gt;, vmin&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;, vmax&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)
ax &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;axes()
ax&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;set_xticks(&lt;span style=&#34;color: #336666&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;len&lt;/span&gt;(name_list)))
ax&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;set_xticklabels(name_list, rotation&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;90&lt;/span&gt;)
ax&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;xaxis&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;set_ticks_position(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;bottom&amp;quot;&lt;/span&gt;)
ax&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;set_yticks(&lt;span style=&#34;color: #336666&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;len&lt;/span&gt;(name_list)))
ax&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;set_yticklabels(name_list)

pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;title(title)
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;colorbar()
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;grid(&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;)
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;Predict class&amp;#39;&lt;/span&gt;)
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;True class&amp;#39;&lt;/span&gt;)
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;grid(&lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt;)
pylab&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;show()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;confusion_matrix.png&#34; alt=&#34;confusion_matrix.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ある程度精度は出るっぽいので、対象フォント数を増やしたい

&lt;ul&gt;
&lt;li&gt;なぜか Helvetica の認識率だけ悪いのは気になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;実際にフォント推定器をスマホアプリとかに埋め込みたい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
